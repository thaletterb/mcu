/*
 *  Example initialization code for the STM32ValueLine Discovery Board
 *  and SSD1306 128 x 64 OLED.
 *
 *  Uses I2C1 peripheral on PB6 (SCLK) and PB7 (SDA) 
 */

#include "stm32f10x.h"
#include <stm32f10x_i2c.h>
#include <stm32f10x_rcc.h>
#include <stm32f10x_gpio.h>
#include <stdio.h>


#define I2C_SPEED                   50000                     /*!< I2C Speed */
#define I2C1_SSD1306_SLAVE_ADDRESS8 0x78                      // 8 bit slave address (write)
#define I2C_TIMEOUT                 100000

static uint8_t global_display_buffer[(128*64)/8] = {

    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,        // Page 0 (Top Most)
    0x80,0xC0,0x40,0x60,0x20,0x20,0x20,0x20,0x60,0xC0,0x80,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x00,0x00,0x00,0x00,0xF8,0x7C,0x86,
    0xF6,0x1E,0x04,0x0C,0xF8,0xE0,0xC0,0x30,0x88,0xCC,0x24,0x26,0x06,0x06,0xFC,0xF0,
    0x00,0x00,0x80,0xC0,0x80,0xC0,0xC0,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    
    0x00,0x00,0x00,0x00,0x00,0x60,0xFC,0x0C,0x7A,0x0F,0x81,0x03,0x02,0x06,0x0C,0x1C,
    0x07,0x00,0xC0,0x43,0x01,0x01,0x03,0x04,0x00,0x21,0x3F,0x1E,0x18,0x08,0x0C,0x08,
    0x0C,0xC8,0x18,0x18,0x70,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x80,0xC0,0x60,0xE0,0xC0,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x3C,0xF6,0xC2,0xA3,0x61,0xC1,0xC1,0x81,0x03,0x03,0x06,0x1F,0x3A,0x21,
    0x81,0x00,0x00,0x00,0x07,0x7F,0xFF,0x1E,0x02,0x00,0x00,0xE0,0x70,0x3E,0x0F,0x06,
    0x83,0x81,0xC1,0x60,0x60,0x70,0x78,0x39,0x27,0x73,0x20,0x60,0xC0,0xC0,0x00,0x00,
    
    0x00,0x00,0x00,0x00,0x80,0xC0,0x31,0x1B,0x0E,0x0C,0x1C,0x00,0x18,0x10,0x30,0x30,
    0x00,0x00,0x83,0xFE,0x3C,0x18,0x18,0x70,0xE0,0x30,0x00,0x00,0x18,0x00,0x00,0x08,
    0x08,0x00,0x0C,0x4E,0xDB,0x30,0x30,0x60,0xC0,0x80,0x00,0x00,0x00,0xC0,0xA0,0x98,
    0xA4,0xB4,0xAC,0x08,0x30,0x30,0xC0,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0xD0,0x38,
    0x0E,0x0E,0x07,0x07,0x00,0x00,0x00,0x0F,0x07,0x02,0x33,0x99,0xEF,0x0B,0x00,0x00,
    0x00,0x80,0xC0,0x60,0x30,0x19,0x0B,0x0B,0x0E,0x06,0x0E,0x44,0x06,0x06,0x06,0x86,
    0x84,0x8C,0xEC,0xF8,0x0C,0xE6,0xB7,0x86,0x04,0x0C,0x79,0xF8,0x88,0x0C,0x02,0x86,
    0x05,0x00,0x00,0x02,0xC2,0xE1,0xE1,0xE1,0xA3,0xB2,0x30,0x10,0x18,0x1F,0x07,0x00,
    
    0x00,0x00,0x00,0x00,0x0F,0x39,0x70,0x60,0xC0,0xC0,0xC0,0xE0,0x00,0x00,0x80,0x10,
    0x18,0x0C,0x06,0x07,0x06,0x04,0x7E,0x67,0x07,0x06,0x04,0x0C,0x0C,0x0C,0x48,0x40,
    0xE0,0x72,0x60,0x62,0x23,0x31,0x30,0x18,0x0F,0x03,0x00,0x00,0x01,0x07,0x01,0x01,
    0x00,0x00,0x01,0x03,0x06,0x9C,0x60,0x01,0x06,0xDC,0x70,0x00,0x00,0xED,0xBF,0xE0,
    0xE0,0xF0,0x70,0x68,0x38,0x1C,0x16,0x0C,0x0D,0x06,0x02,0x03,0x00,0x00,0x00,0x00,
    0x0E,0x1F,0x18,0x30,0x31,0x33,0xF2,0x7A,0x19,0x1C,0x0C,0x8C,0x86,0x02,0x21,0x01,
    0x00,0x90,0x19,0x07,0x06,0x9C,0xF8,0x18,0x18,0x1C,0x1E,0x33,0xE1,0x81,0x01,0x03,
    0x07,0x06,0x0E,0x0C,0x18,0x70,0xE0,0x80,0x80,0x81,0x83,0x83,0xC6,0x7E,0x38,0x00,
    
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x39,0x30,0x30,0x21,0x30,
    0x30,0x30,0x30,0x20,0x30,0x1E,0x1E,0x3E,0xF8,0xF0,0xF4,0xF4,0xF4,0xF6,0xB0,0x1C,
    0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0xE2,0x5F,0x9A,0xAA,0x5F,0xC1,0xF8,0xFB,0x4E,0x23,0x8F,
    0xC3,0x60,0x30,0x90,0xD8,0xC8,0xEC,0xA4,0xE4,0xA6,0xE4,0x8C,0x8C,0x98,0x30,0xE0,
    0x00,0x00,0x00,0x00,0x00,0x0F,0x1C,0x30,0x31,0x13,0x19,0x0D,0xAC,0xFE,0x07,0x01,
    0x01,0x00,0x00,0x00,0xE0,0xFE,0xED,0x80,0x00,0x00,0x00,0x00,0x00,0x07,0x7F,0xFE,
    0x18,0x18,0x30,0x30,0x20,0x30,0x19,0x1F,0x05,0x01,0x01,0x01,0x00,0x00,0x00,0x00,
    
    0x00,0x00,0x00,0x80,0xC0,0x60,0x60,0x20,0x30,0x20,0x20,0x30,0x20,0x30,0x20,0x20,
    0x20,0x60,0x60,0xC0,0x00,0x00,0x00,0x00,0x00,0x03,0xFF,0xFF,0x00,0xEB,0x7F,0x00,
    0x00,0x80,0xC0,0x40,0x60,0x20,0x90,0x18,0x08,0x08,0x88,0xCC,0x6C,0x34,0x1C,0x08,
    0x00,0x00,0x00,0x00,0xEC,0xBF,0x01,0xF1,0xFF,0xFE,0xFF,0xBB,0x7E,0x1E,0x0E,0x05,
    0x02,0x01,0x01,0x01,0x01,0x00,0x00,0x01,0x00,0x00,0x01,0x00,0x01,0x03,0x07,0x07,
    0x00,0x00,0x00,0x70,0xE0,0xC0,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x03,0x07,0x04,
    0x04,0x06,0x02,0x03,0x00,0x0F,0xFF,0x9F,0x3F,0xFE,0x0C,0x06,0x02,0x02,0x03,0x01,
    0x00,0x00,0x00,0x00,0x00,0x80,0xC0,0xE0,0x70,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    
    0x00,0x03,0x01,0x03,0x03,0x03,0x03,0x03,0x02,0x06,0x06,0x06,0x0C,0x18,0x18,0x70,
    0xEC,0x9E,0x9E,0x7C,0xF9,0xB3,0xC6,0x8C,0x38,0xE0,0xFF,0x81,0xF8,0x7F,0x98,0xC6,
    0xE3,0x78,0x3C,0x1C,0x8E,0xC3,0x61,0x18,0x0C,0x03,0x01,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x05,0x1F,0xFC,0xFF,0xCF,0x39,0x07,0x01,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x1F,0x78,0xC1,0xC1,0x01,0x0B,0x33,0x12,0x42,0x42,0x46,0xC6,
    0xC6,0x84,0x0C,0x18,0x30,0xE0,0xD9,0xFB,0xFA,0xEF,0x60,0x30,0x10,0x18,0x18,0x8C,
    0x0C,0xE4,0x06,0x06,0x03,0xE3,0x3F,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,        // Page 7 (bottom)
    0x00,0x00,0x03,0x03,0x0F,0x0D,0x1B,0x1B,0x33,0x32,0x37,0x2F,0x33,0x32,0x13,0x11,
    0x18,0x0C,0x06,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x0F,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x03,0x07,0x06,0x0C,0x08,0x18,0x30,0x30,
    0x60,0x60,0x61,0xE6,0xEC,0x7E,0x7F,0x47,0x9B,0xCC,0x84,0x86,0xC2,0x43,0x41,0x61,
    0x20,0x30,0x1C,0x06,0x03,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

};

GPIO_InitTypeDef GPIO_InitStructureOutput;      // Structure for Output Definitions
GPIO_InitTypeDef GPIO_InitStructureI2C;         // Structure for I2C Definitions

I2C_InitTypeDef I2C_InitStructure;              // Structure for I2


/* Private functions ---------------------------------------------------------*/
void init_error_led_pin(void){
    GPIO_InitTypeDef GPIO_InitStructure;

    // Enable peripheral Clocks
    // Enable clocks for GPIO Port C
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);

    // Configure Pins
    // Pin PC9 must be configured as an output
    GPIO_StructInit(&GPIO_InitStructure);
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
    GPIO_Init(GPIOC, &GPIO_InitStructure);
}

void turn_on_error_led_pin(void){
    GPIO_WriteBit(GPIOC, GPIO_Pin_9, 1);
}

int i2c_send_command(I2C_TypeDef *I2Cx, uint8_t slave_address, uint8_t slave_data){
// Sends I2C data over I2Cx:
//  1) Sends Start Condition. Checks for I2C EV5 
//  2) Sends 7 bit address & checks for EV6
//  3) Sends 8 bit command byte (0x00) & checks for EV8
//  4) Sends 8 bits (1 byte) of data & checks for EV8
//  5) Sends Stop Condition
    int TimeOut;
    
    #define COMMAND_BYTE 0x00

    /* Send I2C1 START condition */
    I2C_GenerateSTART(I2Cx, ENABLE);
   
    /* Test on I2C1 EV5 and clear it */
    TimeOut = I2C_TIMEOUT;
    while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_MODE_SELECT))
    {
        TimeOut--;
        if (TimeOut == 0){
            GPIO_WriteBit(GPIOC, GPIO_Pin_9, 1);       // Error LED
            return 1;
        }
    }
   
    /* Send SSD1306 7 bit slave Address for write. Check to make sure ACK received */
    I2C_Send7bitAddress(I2Cx, I2C1_SSD1306_SLAVE_ADDRESS8, I2C_Direction_Transmitter);
   
    //Test on I2C1 EV6 and clear it
    TimeOut = I2C_TIMEOUT;
    while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
    {
        TimeOut--;
        if (TimeOut == 0){
            // Send I2C1 STOP Condition
            I2C_GenerateSTOP(I2Cx, ENABLE);
            GPIO_WriteBit(GPIOC, GPIO_Pin_9, 1);        // Error LED
    
            return 2;
        }
    }
    I2C_SendData(I2Cx, COMMAND_BYTE);
    while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED)){ // Wait for EV8
        TimeOut--;
        if (TimeOut == 0){
            // Send I2C1 STOP Condition
            I2C_GenerateSTOP(I2Cx, ENABLE);
            GPIO_WriteBit(GPIOC, GPIO_Pin_9, 1);        // Error LED

            return 2;
        }
    }
    I2C_SendData(I2Cx, slave_data);
    while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED)){ // Wait for EV8
        TimeOut--;
        if (TimeOut == 0){
            // Send I2C1 STOP Condition
            I2C_GenerateSTOP(I2Cx, ENABLE);
            GPIO_WriteBit(GPIOC, GPIO_Pin_9, 1);        // Error LED

            return 2;
        }
    }
    I2C_GenerateSTOP(I2Cx, ENABLE);
}

void ssd1306_i2c_init(I2C_TypeDef *I2Cx, uint8_t ssd1306_slave_address){
// Sends the init commands to the display
    i2c_send_command(I2Cx, ssd1306_slave_address, 0xAE);

    i2c_send_command(I2Cx, ssd1306_slave_address, 0x00 | 0x0);            // low col = 0
    
    i2c_send_command(I2Cx, ssd1306_slave_address, 0x10 | 0x0);           // hi col = 0
    i2c_send_command(I2Cx, ssd1306_slave_address, 0x40 | 0x0);            // line #0

    i2c_send_command(I2Cx, ssd1306_slave_address, 0x81);                   // Set Contrast 0x81
    i2c_send_command(I2Cx, ssd1306_slave_address, 0xCF);
    i2c_send_command(I2Cx, ssd1306_slave_address, 0xA1);                    // Segremap - 0xA1
    i2c_send_command(I2Cx, ssd1306_slave_address, 0xC8);                    // COMSCAN DEC 0xC8 C0
    i2c_send_command(I2Cx, ssd1306_slave_address, 0xA6);                    // Normal Display 0xA6 (Invert A7)

    i2c_send_command(I2Cx, ssd1306_slave_address, 0xA4);                // DISPLAY ALL ON RESUME - 0xA4
    i2c_send_command(I2Cx, ssd1306_slave_address, 0xA8);                    // Set Multiplex 0xA8
    i2c_send_command(I2Cx, ssd1306_slave_address, 0x3F);                    // 1/64 Duty Cycle 

    i2c_send_command(I2Cx, ssd1306_slave_address, 0xD3);                    // Set Display Offset 0xD3
    i2c_send_command(I2Cx, ssd1306_slave_address, 0x0);                     // no offset

    i2c_send_command(I2Cx, ssd1306_slave_address, 0xD5);                    // Set Display Clk Div 0xD5
    i2c_send_command(I2Cx, ssd1306_slave_address, 0x80);                    // Recommneded resistor ratio 0x80

    i2c_send_command(I2Cx, ssd1306_slave_address, 0xD9);                  // Set Precharge 0xd9
    i2c_send_command(I2Cx, ssd1306_slave_address, 0xF1);

    i2c_send_command(I2Cx, ssd1306_slave_address, 0xDA);                    // Set COM Pins0xDA
    i2c_send_command(I2Cx, ssd1306_slave_address, 0x12);

    i2c_send_command(I2Cx, ssd1306_slave_address, 0xDB);                 // Set VCOM Detect - 0xDB
    i2c_send_command(I2Cx, ssd1306_slave_address, 0x40);

    i2c_send_command(I2Cx, ssd1306_slave_address, 0x20);                    // Set Memory Addressing Mode
    i2c_send_command(I2Cx, ssd1306_slave_address, 0x00);                    // 0x00 - Horizontal

    i2c_send_command(I2Cx, ssd1306_slave_address, 0x40 | 0x0);              // Set start line at line 0 - 0x40 

    i2c_send_command(I2Cx, ssd1306_slave_address, 0x8D);                    // Charge Pump -0x8D
    i2c_send_command(I2Cx, ssd1306_slave_address, 0x14);


    i2c_send_command(I2Cx, ssd1306_slave_address, 0xA4);              //--turn on all pixels - A5. Regular mode A4
    i2c_send_command(I2Cx, ssd1306_slave_address, 0xAF);                //--turn on oled panel - AF
}

int ssd1306_i2c_draw_buffer(I2C_TypeDef *I2Cx, uint8_t slave_address){
    #define SSD1306_COLUMNADDR  0x21
    #define SSD1306_PAGEADDR    0x22
    #define DATA_BYTE           0x40

    int TimeOut;

    i2c_send_command(I2Cx, slave_address, SSD1306_COLUMNADDR);   
    i2c_send_command(I2Cx, slave_address, 0x00);            // Column Start address
    i2c_send_command(I2Cx, slave_address, 127);             // Column end address

    i2c_send_command(I2Cx, slave_address, SSD1306_PAGEADDR);   
    i2c_send_command(I2Cx, slave_address, 0x00);            // Page Start address
    i2c_send_command(I2Cx, slave_address, 0x07);            // Page end address

    uint16_t i=0;
    uint8_t x, y;


    /* Send I2C1 START condition */
    I2C_GenerateSTART(I2Cx, ENABLE);
   
    /* Test on I2C1 EV5 and clear it */
    TimeOut = I2C_TIMEOUT;
    while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_MODE_SELECT))
    {
        TimeOut--;
        if (TimeOut == 0){
            GPIO_WriteBit(GPIOC, GPIO_Pin_9, 1);       // Error LED
            return 1;
        }
    }
   
    /* Send SSD1306 7 bit slave Address for write. Check to make sure ACK received */
    I2C_Send7bitAddress(I2Cx, slave_address, I2C_Direction_Transmitter);
   
    //Test on I2C1 EV6 and clear it
    TimeOut = I2C_TIMEOUT;
    while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
    {
        TimeOut--;
        if (TimeOut == 0){
            // Send I2C1 STOP Condition
            I2C_GenerateSTOP(I2Cx, ENABLE);
            GPIO_WriteBit(GPIOC, GPIO_Pin_9, 1);        // Error LED
    
            return 2;
        }
    }
   
    // Init sequence for 128x64 OLED module
    I2C_SendData(I2Cx, DATA_BYTE);
    while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED)){ // Wait for EV8
        TimeOut--;
        if (TimeOut == 0){
            // Send I2C1 STOP Condition
            I2C_GenerateSTOP(I2Cx, ENABLE);
            GPIO_WriteBit(GPIOC, GPIO_Pin_9, 1);        // Error LED

            return 2;
        }
    }

    for(y=0; y<8; y++){
        for(x=0; x<128; x++){
            I2C_SendData(I2Cx, global_display_buffer[(128*y)+x]);
            //I2C_SendData(I2Cx, 0x55);
            while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED)){ // Wait for EV8
                TimeOut--;
                if (TimeOut == 0){
                    // Send I2C1 STOP Condition
                    I2C_GenerateSTOP(I2Cx, ENABLE);
                    GPIO_WriteBit(GPIOC, GPIO_Pin_9, 1);        // Error LED

                    return 2;
                }
            }
        }
    }
    I2C_GenerateSTOP(I2Cx, ENABLE);
}

void init_i2c1_peripheral(I2C_TypeDef *I2Cx){
// Initializes the I2C1 Peripheral on PB6 & PB7
// 1) Enables the GPIOB Peripheral Clock
// 2) Enable the I2C1 Peripheral Clock
// 3) Configure the GPIO peripheral with GPIO_InitStructure and GPIO_Init()
// 4) Configure the I2C1 peripheral with I2C_InitStructure and I2C_Init() 

    GPIO_InitTypeDef GPIO_InitStructure;
    I2C_InitTypeDef I2C_InitStructure;

    /* GPIOB Periph clock enable */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
    
    /* I2C1 and I2C2 Periph clock enable */
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
    
    /* Configure I2C1 pins: SCL and SDA ----------------------------------------*/
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_OD; // Open Drain, I2C bus pulled high externally
    GPIO_Init(GPIOB, &GPIO_InitStructure);
    
    /* Enable I2C1 -------------------------------------------------------------*/
    I2C_DeInit(I2C1);
    
    I2C_Cmd(I2C1, ENABLE);
    
    /* I2C1 configuration ------------------------------------------------------*/
    I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
    I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
    I2C_InitStructure.I2C_OwnAddress1 = 0x039;                                  // This is important for some reason!
    //I2C_InitStructure.I2C_OwnAddress1 = 0x000;
    I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
    I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
    I2C_InitStructure.I2C_ClockSpeed = I2C_SPEED;
    I2C_Init(I2C1, &I2C_InitStructure);
}

/**
* @brief Main program
* @param None
* @retval : None
*/
int main(void)
{
    int TimeOut;

    init_error_led_pin();

    /*----- Configure I2C Phase -----*/
    //init_i2c1_peripheral(I2C1);                                               // To Do - Move All this into init_i2c1_peripheral()
    GPIO_InitTypeDef GPIO_InitStructure;
    I2C_InitTypeDef I2C_InitStructure;

    /* GPIOB Periph clock enable */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
    
    /* I2C1 and I2C2 Periph clock enable */
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
    
    /* Configure I2C1 pins: SCL and SDA ----------------------------------------*/
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_OD; // Open Drain, I2C bus pulled high externally
    GPIO_Init(GPIOB, &GPIO_InitStructure);
    
    /* Enable I2C1 -------------------------------------------------------------*/
    I2C_DeInit(I2C1);
    
    I2C_Cmd(I2C1, ENABLE);
    
    /* I2C1 configuration ------------------------------------------------------*/
    I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
    I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
    I2C_InitStructure.I2C_OwnAddress1 = 0x039;                                  // This is important for some reason!
    //I2C_InitStructure.I2C_OwnAddress1 = 0x000;
    I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
    I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
    I2C_InitStructure.I2C_ClockSpeed = I2C_SPEED;
    I2C_Init(I2C1, &I2C_InitStructure);
    
    /*----- Transmission Phase -----*/
    // Init sequence for 128x64 OLED module
    ssd1306_i2c_init(I2C1, I2C1_SSD1306_SLAVE_ADDRESS8);
   
    // Draw the buffer
    //ssd1306_i2c_draw_buffer(I2C1, I2C1_SSD1306_SLAVE_ADDRESS8, global_display_buffer);
    ssd1306_i2c_draw_buffer(I2C1, I2C1_SSD1306_SLAVE_ADDRESS8);

    return 1;
}

#ifdef  USE_FULL_ASSERT


/**
 *   * @brief  Reports the name of the source file and the source line number
 *     *         where the assert_param error has occurred.
 *       * @param  file: pointer to the source file name
 *         * @param  line: assert_param error line source number
 *           * @retval None
 *             */
void assert_failed(uint8_t* file, uint32_t line)
{
      /* User can add his own implementation to report the file name and line number,
       *      ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */

      /* Infinite loop */
      while (1)
            {
                  }
}
#endif

